{
  "name": "hyperd",
  "version": "0.1.0",
  "description": "Virtual DOM based, template engine agnostic, a lightweight view library",
  "keywords": [
    "virtual",
    "dom",
    "component",
    "view"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/nkzawa/hyperd"
  },
  "author": {
    "name": "Naoyuki Kanezawa",
    "email": "naoyuki.kanezawa@gmail.com"
  },
  "license": "MIT",
  "scripts": {
    "prepublish": "browserify -s hyperd index.js > hyperd.js",
    "test": "zuul --phantom --ui mocha-bdd -- test/index.js"
  },
  "dependencies": {
    "clone": "1.0.2",
    "deep-equal": "1.0.0",
    "dom-delegate": "2.0.3",
    "html-to-vdom": "git+https://github.com/nkzawa/html-to-vdom",
    "raf": "2.0.4",
    "trim": "0.0.1",
    "virtual-dom": "2.0.1",
    "xtend": "4.0.0"
  },
  "devDependencies": {
    "browserify": "~10.1.1",
    "es5-shim": "~4.1.1",
    "expect.js": "~0.3.1",
    "phantomjs": "~1.9.16",
    "zuul": "~3.0.0"
  },
  "gitHead": "d24b8d7478eba78675fec727640671433fae0a15",
  "readme": "Hyperd\n======\n\n[![Build Status](https://travis-ci.org/nkzawa/hyperd.svg)](https://travis-ci.org/nkzawa/hyperd)\n\nVirtual DOM based, template engine agnostic, a lightweight view library.\n\n```js\nvar component = hyperd(document.getElementById('count'), function() {\n  return '<div id=\"count\">Counter: ' + this.data.count + '</div>';\n});\n\ncomponent.data.count = 0;\n\nsetInterval(function() {\n  component.data.count++;\n}, 1000);\n```\n\n## Installation\n\n    $ npm install hyperd\n\n```html\n<script src=\"node_modules/hyperd/hyperd.js\"></script>\n```\n\n#### With Bower\n\n    $ bower install hyperd\n\n## Features\n\n- Virtual DOM diffing\n- Template engine agnostic\n- Auto-redrawing\n- Building reusable components\n- Small API\n\n## Examples\n\n- [Counter](http://nkzawa.github.io/hyperd/examples/counter)\n- [Counter Component](http://nkzawa.github.io/hyperd/examples/counter-component)\n- [TodoMVC](http://nkzawa.github.io/hyperd-todomvc/) ([source](https://github.com/nkzawa/hyperd-todomvc))\n\n## API Documentation\n\n#### hyperd(node, render)\n\n- `node` HTMLElement Node to attach\n- `render` Function Called upon redrawing, should return a html string.\n- Return: hyperd.Component\n\nA short circuit to create a simple component instance.\n\n### Class: hyperd.Component\n\nThe base component class.\n\n#### Class Method: hyperd.Component.extend(proto);\n\n- `proto` Object protoype object\n- Return: Function A new component constructor\n\nCreates a new component class.\n\n```js\nvar MyComponent = hyperd.Component.extend({\n  render: function() {\n    return '<div>hi</div>';\n  }\n});\n```\n\n#### new hyperd.Component([props])\n\n- `props` Object properties\n\nIn classes that extends `hyperd.Component`, make sure to call the super constructor so that the all settings can be initialized.\n\n```js\nhyperd.Component.extend({\n  constructor: function(props) {\n    hyperd.Component.apply(this, arguments);\n    ...\n  }\n});\n```\n\n#### component.props\n\nThe properties of the component.\n\n```js\nvar component = new MyComponent({ foo: \"hi\" });\nconsole.log(component.props.foo); // \"hi\"\n```\n\n#### component.data\n\nThe state data of the component. Mutating `data` triggers UI updates.\n\n#### component.node\n\nThe node element which the component is attached to.\n\n#### component.components\n\nDefinitions of child components. You can use defined components like a custom element on `render()`.\n\n```js\nvar Child = hyperd.Component.extend({\n  render: function() {\n    return '<div>' + this.props.foo + '</div>';\n  }\n});\n\nhyperd.Component.extend({\n  components: { child: Child },\n  render: function() {\n    return  '<div><child foo=\"hi\"></div>'\n  }\n});\n```\n\n#### component.attachTo(node)\n\n- `node` HTMLElement\n- Return: `this`\n\nAttaches the component to a DOM node.\n\n#### component.render()\n\n- Return: String A html string to render.\n\nNote: **implement this function, but do NOT call it directly**.\n\nReuired to implement. This method is called automatically and asynchronously when you update `component.data`.\n\n#### component.destroy()\n\nTeardown and delete all properties and event bindings including descendant components.\n\n#### component.emit(event\\[, args1\\]\\[, args2\\]\\[, ...\\])\n\n- `event` String The event type to be triggered.\n- Return: `this`\n\nTrigger a DOM event for `component.node` with the supplied arguments.\n\n```js\ncomponent.emit('edit', arg);\n```\n\n#### component.on(event, listener)\n\n- `event` String The event type.\n- `listener` Function\n- Return: `this`\n\nAdd a listener for the specified event.\n\n```js\ncomponent.on('render', function() { ... });\n```\n\n#### component.on(event, selector, listener)\n\n- `event` String The event type.\n- `selector` String CSS selector.\n- `listener` Function The listener always take an event object as the first argument.\n- Return: `this`\n\nAdd a listener for the delegated event. The listener is called only for descendants that match the `selector`. You can use this to listen an event of a child component too.\n\n```js\nhyperd.Component.extend({\n  constructor: function() {\n    hyperd.Component.apply(this, arguments);\n    this.on('click', 'button', function(event) {\n      console.log('clicked!');\n    });\n  }\n  render: function() {\n    return  '<div><button type=\"button\">Click me!</button></div>'\n  }\n});\n```\n\n#### component.removeListener(event, listener)\n\nRemove a listener for the specified event.\n\n#### component.removeListener(event, selector, listener)\n\nRemove a listener for the delegated event.\n\n#### component.removeAllListeners(\\[event\\]\\[, selector\\])\n\nRemove all listeners, or those of the specified event or the delegated event.\n\n#### component.onAttach()\n\nCalled upon after the component is attached to a node.\n\n#### component.onRender()\n\nCalled upon after the component is rerendered.\n\n#### component.onDestroy()\n\nCalled upon after the component is destroyed.\n\n#### Event: 'attach'\n\nThe same as `component.onAttach`.\n\n```js\ncomponent.on('attach', function() { ... });\n```\n\n#### Event: 'render'\n\nThe same as `component.onRender`.\n\n#### Event: 'destroy'\n\nThe same as `component.onDestroy`.\n\n#### Attribute: 'data-hkey'\n\nThe identifier used to differentiate a node. Used to reconcile an element will be reordered or destroyed.\n\n```js\nhyperd.Component.extend({\n  render: function() {\n    var items = ['foo', 'bar', 'baz'];\n    return '<ul>' + items.map(function(item) {\n      return '<li data-hkey=\"' + item + '\">' + item + '</li>';\n    }) + '</ul>';\n  }\n});\n```\n\n## Licence\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/nkzawa/hyperd/issues"
  },
  "homepage": "https://github.com/nkzawa/hyperd",
  "_id": "hyperd@0.1.0",
  "_shasum": "5a9bc69b8fd3dbbfb6010f14f42d7a52df575277",
  "_from": "hyperd@>=0.1.0 <0.2.0"
}
